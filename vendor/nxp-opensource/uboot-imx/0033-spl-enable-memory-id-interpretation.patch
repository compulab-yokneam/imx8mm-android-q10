From 54c36a2c3cad27cad485157f55298bcdc514cffc Mon Sep 17 00:00:00 2001
From: Kirill Kapranov <kirill.kapranov@compulab.co.il>
Date: Wed, 27 May 2020 21:09:33 +0300
Subject: [PATCH 33/49] spl: enable memory id interpretation

Signed-off-by: Kirill Kapranov <kirill.kapranov@compulab.co.il>
---
 board/compulab/ucm-imx8m-mini/Makefile             |   8 +-
 board/compulab/ucm-imx8m-mini/ddr/ddr.c            | 199 +++++++++++++++++++++
 board/compulab/ucm-imx8m-mini/ddr/ddr.h            |  10 +-
 ...lpddr4_timing_1g.c => lpddr4_timing_01061010.c} |   4 +-
 ...lpddr4_timing_4g.c => lpddr4_timing_ff000110.c} |   4 +-
 ...lpddr4_timing_2g.c => lpddr4_timing_ff020008.c} |   4 +-
 board/compulab/ucm-imx8m-mini/eeprom.c             | 192 ++++++++++++++++++++
 board/compulab/ucm-imx8m-mini/eeprom.h             |  30 ++++
 board/compulab/ucm-imx8m-mini/eeprom_spl.c         | 147 +++++++++++++++
 board/compulab/ucm-imx8m-mini/spl.c                |  74 --------
 board/compulab/ucm-imx8m-mini/ucm-imx8m-mini.c     |  25 ++-
 board/compulab/ucm-imx8m-mini/ucm-imx8m-mini.h     |   2 +-
 12 files changed, 609 insertions(+), 90 deletions(-)
 create mode 100644 board/compulab/ucm-imx8m-mini/ddr/ddr.c
 rename board/compulab/ucm-imx8m-mini/ddr/{lpddr4_timing_1g.c => lpddr4_timing_01061010.c} (99%)
 rename board/compulab/ucm-imx8m-mini/ddr/{lpddr4_timing_4g.c => lpddr4_timing_ff000110.c} (99%)
 rename board/compulab/ucm-imx8m-mini/ddr/{lpddr4_timing_2g.c => lpddr4_timing_ff020008.c} (99%)
 create mode 100644 board/compulab/ucm-imx8m-mini/eeprom.c
 create mode 100644 board/compulab/ucm-imx8m-mini/eeprom.h
 create mode 100644 board/compulab/ucm-imx8m-mini/eeprom_spl.c

diff --git a/board/compulab/ucm-imx8m-mini/Makefile b/board/compulab/ucm-imx8m-mini/Makefile
index 4148bfd3d2..46f2ec9164 100644
--- a/board/compulab/ucm-imx8m-mini/Makefile
+++ b/board/compulab/ucm-imx8m-mini/Makefile
@@ -8,5 +8,11 @@ obj-y += ucm-imx8m-mini.o
 
 ifdef CONFIG_SPL_BUILD
 obj-y += spl.o
-obj-y += ddr/lpddr4_timing_1g.o ddr/lpddr4_timing_2g.o ddr/lpddr4_timing_4g.o
+obj-y += ddr/ddr.o
+obj-y += ddr/lpddr4_timing_ff020008.o
+obj-y += ddr/lpddr4_timing_ff000110.o
+obj-y += ddr/lpddr4_timing_01061010.o
+obj-y += eeprom_spl.o
+else
+obj-y += ucm-imx8m-mini.o eeprom.o
 endif
diff --git a/board/compulab/ucm-imx8m-mini/ddr/ddr.c b/board/compulab/ucm-imx8m-mini/ddr/ddr.c
new file mode 100644
index 0000000000..6f0d6de7f1
--- /dev/null
+++ b/board/compulab/ucm-imx8m-mini/ddr/ddr.c
@@ -0,0 +1,199 @@
+#include <common.h>
+#include <spl.h>
+#include <asm/io.h>
+#include <errno.h>
+#include <asm/io.h>
+#include <asm/arch/ddr.h>
+#include <asm/mach-imx/iomux-v3.h>
+#include <asm/mach-imx/gpio.h>
+#include <asm-generic/gpio.h>
+#include <asm/arch/ddr.h>
+#include <asm/arch/imx8mq_pins.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/arch/clock.h>
+#include <asm/mach-imx/gpio.h>
+#include "ddr.h"
+
+/* Forward declarations */
+u32 cl_eeprom_get_ddrinfo(void);
+u32 cl_eeprom_set_ddrinfo(u32 ddrinfo);
+
+u32 cl_eeprom_get_osize(void);
+
+static unsigned int lpddr4_mr_read(unsigned int mr_rank, unsigned int mr_addr)
+{
+	unsigned int tmp;
+	reg32_write(DRC_PERF_MON_MRR0_DAT(0), 0x1);
+	do {
+		tmp = reg32_read(DDRC_MRSTAT(0));
+	} while (tmp & 0x1);
+
+	reg32_write(DDRC_MRCTRL0(0), (mr_rank << 4) | 0x1);
+	reg32_write(DDRC_MRCTRL1(0), (mr_addr << 8));
+	reg32setbit(DDRC_MRCTRL0(0), 31);
+	do {
+		tmp = reg32_read(DRC_PERF_MON_MRR0_DAT(0));
+	} while ((tmp & 0x8) == 0);
+	tmp = reg32_read(DRC_PERF_MON_MRR1_DAT(0));
+	reg32_write(DRC_PERF_MON_MRR0_DAT(0), 0x4);
+	while(tmp) { //try to find a significant byte in the word
+		if(tmp & 0xff) {
+			tmp &= 0xff;
+			break;
+		}
+		tmp >>= 8;
+	}
+	return tmp;
+}
+
+struct lpddr4_desc {
+	char name[16];
+	unsigned int id;
+	unsigned int size;
+	unsigned int count;
+	/* an optional field
+	 * use it if default is not the
+	 * 1-st array entry */
+	unsigned int _default;
+	struct dram_timing_info *timing;
+	char *desc[4];
+};
+
+struct lpddr4_tcm_desc {
+	unsigned int size;
+	unsigned int sign;
+	unsigned int index;
+	unsigned int count;
+};
+
+#define DEFAULT (('D' << 24) + ('E' << 16 ) + ( 'F' << 8 ) + 'A')
+static const struct lpddr4_desc lpddr4_array[] = {
+	{ .name = "Micron", .id = 0xff020008, .size = 2048, .count = 1, .timing = &ucm_dram_timing_ff020008},
+	{ .name = "Micron", .id = 0xff000110, .size = 4096, .count = 1, .timing = &ucm_dram_timing_ff000110},
+	{ .name = "Samsung",.id = 0x01061010, .size = 2048, .count = 1, .timing = &ucm_dram_timing_01061010},
+	{ .name = "Nanya",  .id = 0x05000010, .size = 2048, .count = 1, .timing = &ucm_dram_timing_01061010},
+};
+
+static unsigned int lpddr4_get_mr(void)
+{
+	int i = 0, attempts = 5;
+	unsigned int ddr_info = 0;
+	unsigned int regs[] = { 5, 6, 7, 8 };
+
+	do {
+		for ( i = 0 ; i < ARRAY_SIZE(regs) ; i++ ) {
+			unsigned int data = 0;
+			data = lpddr4_mr_read(0xF, regs[i]);
+			ddr_info <<= 8;
+			ddr_info += (data & 0xFF);
+		}
+		if ((ddr_info != 0xFFFFFFFF) && (ddr_info != 0))
+			break; // The attempt was successfull
+	} while ( --attempts );
+	return	ddr_info;
+}
+
+static void spl_tcm_init(struct lpddr4_tcm_desc *lpddr4_tcm_desc) {
+    if (lpddr4_tcm_desc->sign == DEFAULT)
+	    return;
+
+    lpddr4_tcm_desc->sign = DEFAULT;
+    lpddr4_tcm_desc->index = 0;
+}
+
+static void spl_tcm_fini(struct lpddr4_tcm_desc *lpddr4_tcm_desc) {
+    if (lpddr4_tcm_desc->sign != DEFAULT)
+	    return;
+
+    lpddr4_tcm_desc->sign = ~DEFAULT;
+    lpddr4_tcm_desc->index = 0;
+}
+
+#define SPL_TCM_DATA 0x7e0000
+#define SPL_TCM_INIT spl_tcm_init(lpddr4_tcm_desc)
+#define SPL_TCM_FINI spl_tcm_fini(lpddr4_tcm_desc)
+
+void spl_dram_init(void)
+{
+	unsigned int ddr_info = 0xdeadbeef;
+	unsigned int ddr_info_mrr = 0xdeadbeef;
+	unsigned int ddr_found = 0;
+	int i = 0;
+
+	struct lpddr4_tcm_desc *lpddr4_tcm_desc = (struct lpddr4_tcm_desc *) SPL_TCM_DATA;
+
+	if (lpddr4_tcm_desc->sign != DEFAULT) {
+		/* get ddr type from the eeprom if not in tcm scan mode */
+		ddr_info = cl_eeprom_get_ddrinfo();
+		for ( i = 0; i < ARRAY_SIZE(lpddr4_array); i++ ) {
+			if (lpddr4_array[i].id == ddr_info) {
+				ddr_found = 1;
+				break;
+			}
+		}
+	}
+
+	/* Walk trought all available ddr ids and apply
+	 * one by one. Save the index at the tcm memory that
+	 * persists after the reset.
+	 */
+	if (ddr_found == 0) {
+
+		SPL_TCM_INIT;
+
+		if (lpddr4_tcm_desc->index < ARRAY_SIZE(lpddr4_array)) {
+			printf("DDRINFO: Cfg attempt: [ %d/%lu ]\n", lpddr4_tcm_desc->index+1, ARRAY_SIZE(lpddr4_array));
+			i = lpddr4_tcm_desc->index;
+			lpddr4_tcm_desc->index += 1;
+		} else {
+			/* Ran out all available ddr setings */
+			printf("DDRINFO: Ran out all [ %lu ] cfg attempts. A non supported configuration.\n", ARRAY_SIZE(lpddr4_array));
+			while ( 1 ) {};
+		}
+		ddr_info = lpddr4_array[i].id;
+	} else
+
+	printf("DDRINFO(%s): %s %dG @ %d MHz\n", (ddr_found ? "D" : "?" ), lpddr4_array[i].name,
+			lpddr4_array[i].size, lpddr4_array[i].timing->fsp_table[0]);
+
+	ddr_init(lpddr4_array[i].timing);
+
+	ddr_info_mrr = lpddr4_get_mr();
+	if (ddr_info_mrr == 0xFFFFFFFF ) {
+		printf("DDRINFO(M): mr5-8 [ 0x%x ] is invalid; reset\n", ddr_info_mrr);
+		SPL_TCM_INIT;
+		do_reset(NULL,0,0,NULL);
+	}
+
+	printf("DDRINFO(M): mr5-8 [ 0x%x ]\n", ddr_info_mrr);
+	printf("DDRINFO(%s): mr5-8 [ 0x%x ]\n", (ddr_found ? "E" : "T" ), ddr_info);
+
+	if (ddr_info_mrr != ddr_info) {
+		SPL_TCM_INIT;
+		do_reset(NULL,0,0,NULL);
+	}
+
+	SPL_TCM_FINI;
+
+	if (ddr_found == 0) {
+		/* Update eeprom */
+		cl_eeprom_set_ddrinfo(ddr_info_mrr);
+		ddr_info = cl_eeprom_get_ddrinfo();
+		/* make sure that the ddr_info has reached the eeprom */
+		printf("DDRINFO(E): mr5-8 [ 0x%x ], read back\n", ddr_info);
+		if (ddr_info_mrr != ddr_info) {
+			printf("DDRINFO(EEPROM): make sure that the eeprom is accessible\n");
+			printf("DDRINFO(EEPROM): i2c dev 1; i2c md 0x51 0x40 0x50\n");
+		}
+	}
+
+	/* Pass the dram size to th U-Boot through the tcm memory */
+	{ /* To figure out what to store into the TCM buffer */
+	  /* For debug purpouse only. To override the real memsize */
+		unsigned int ddr_tcm_size = cl_eeprom_get_osize();
+		if ((ddr_tcm_size == 0) || (ddr_tcm_size == -1))
+			ddr_tcm_size = lpddr4_array[i].size;
+
+		lpddr4_tcm_desc->size = ddr_tcm_size;
+	}
+}
diff --git a/board/compulab/ucm-imx8m-mini/ddr/ddr.h b/board/compulab/ucm-imx8m-mini/ddr/ddr.h
index c8241ee6e6..ef38851324 100644
--- a/board/compulab/ucm-imx8m-mini/ddr/ddr.h
+++ b/board/compulab/ucm-imx8m-mini/ddr/ddr.h
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 NXP
+ * Copyright 2020 Compulab Ltd.
  *
  * SPDX-License-Identifier:	GPL-2.0+
  */
@@ -7,8 +7,10 @@
 #ifndef __DDR_H__
 #define __DDR_H__
 
-extern struct dram_timing_info ucm_dram_timing_4g;
-extern struct dram_timing_info ucm_dram_timing_2g;
-extern struct dram_timing_info ucm_dram_timing_1g;
+extern struct dram_timing_info ucm_dram_timing_ff020008;
+extern struct dram_timing_info ucm_dram_timing_ff000110;
+extern struct dram_timing_info ucm_dram_timing_01061010;
+
+void spl_dram_init(void);
 
 #endif
diff --git a/board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_1g.c b/board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_01061010.c
similarity index 99%
rename from board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_1g.c
rename to board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_01061010.c
index 4a4cd4dfea..8ea663bb5e 100644
--- a/board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_1g.c
+++ b/board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_01061010.c
@@ -8,7 +8,7 @@
  */
 
 #include <linux/kernel.h>
-#include <asm/arch/imx8m_ddr.h>
+#include <asm/arch/ddr.h>
 
 static struct dram_cfg_param ddr_ddrc_cfg[] = {
 	/** Initialize DDRC registers **/
@@ -1833,7 +1833,7 @@ static struct dram_fsp_msg ddr_dram_fsp_msg[] = {
 };
 
 /* ddr timing config params */
-struct dram_timing_info ucm_dram_timing_1g = {
+struct dram_timing_info ucm_dram_timing_01061010 = {
 	.ddrc_cfg = ddr_ddrc_cfg,
 	.ddrc_cfg_num = ARRAY_SIZE(ddr_ddrc_cfg),
 	.ddrphy_cfg = ddr_ddrphy_cfg,
diff --git a/board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_4g.c b/board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_ff000110.c
similarity index 99%
rename from board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_4g.c
rename to board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_ff000110.c
index c1b256eab0..74b8970322 100644
--- a/board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_4g.c
+++ b/board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_ff000110.c
@@ -8,7 +8,7 @@
  */
 
 #include <linux/kernel.h>
-#include <asm/arch/imx8m_ddr.h>
+#include <asm/arch/ddr.h>
 
 static struct dram_cfg_param ddr_ddrc_cfg[] = {
 	/** Initialize DDRC registers **/
@@ -1833,7 +1833,7 @@ static struct dram_fsp_msg ddr_dram_fsp_msg[] = {
 };
 
 /* ddr timing config params */
-struct dram_timing_info ucm_dram_timing_4g = {
+struct dram_timing_info ucm_dram_timing_ff000110 = {
 	.ddrc_cfg = ddr_ddrc_cfg,
 	.ddrc_cfg_num = ARRAY_SIZE(ddr_ddrc_cfg),
 	.ddrphy_cfg = ddr_ddrphy_cfg,
diff --git a/board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_2g.c b/board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_ff020008.c
similarity index 99%
rename from board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_2g.c
rename to board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_ff020008.c
index cf0e5c7148..014add061e 100644
--- a/board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_2g.c
+++ b/board/compulab/ucm-imx8m-mini/ddr/lpddr4_timing_ff020008.c
@@ -8,7 +8,7 @@
  */
 
 #include <linux/kernel.h>
-#include <asm/arch/imx8m_ddr.h>
+#include <asm/arch/ddr.h>
 
 static struct dram_cfg_param ddr_ddrc_cfg[] = {
 	/** Initialize DDRC registers **/
@@ -1833,7 +1833,7 @@ static struct dram_fsp_msg ddr_dram_fsp_msg[] = {
 };
 
 /* ddr timing config params */
-struct dram_timing_info ucm_dram_timing_2g = {
+struct dram_timing_info ucm_dram_timing_ff020008 = {
 	.ddrc_cfg = ddr_ddrc_cfg,
 	.ddrc_cfg_num = ARRAY_SIZE(ddr_ddrc_cfg),
 	.ddrphy_cfg = ddr_ddrphy_cfg,
diff --git a/board/compulab/ucm-imx8m-mini/eeprom.c b/board/compulab/ucm-imx8m-mini/eeprom.c
new file mode 100644
index 0000000000..fd1fa49e21
--- /dev/null
+++ b/board/compulab/ucm-imx8m-mini/eeprom.c
@@ -0,0 +1,192 @@
+/*
+ * (C) Copyright 2011 CompuLab, Ltd. <www.compulab.co.il>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <i2c.h>
+#include <eeprom_layout.h>
+#include <eeprom_field.h>
+#include <linux/kernel.h>
+#include <asm/setup.h>
+
+#ifndef CONFIG_SYS_I2C_EEPROM_ADDR
+#define CONFIG_SYS_I2C_EEPROM_ADDR	0x50
+#define CONFIG_SYS_I2C_EEPROM_ADDR_LEN	1
+#endif
+
+#ifndef CONFIG_SYS_I2C_EEPROM_BUS
+#define CONFIG_SYS_I2C_EEPROM_BUS	1
+#endif
+
+#define EEPROM_LAYOUT_VER_OFFSET	44
+#define BOARD_SERIAL_OFFSET		20
+#define BOARD_SERIAL_OFFSET_LEGACY	8
+#define BOARD_REV_OFFSET		0
+#define BOARD_REV_OFFSET_LEGACY		6
+#define BOARD_REV_SIZE			2
+#define PRODUCT_NAME_OFFSET		128
+#define PRODUCT_NAME_SIZE		16
+#define MAC_ADDR_OFFSET			4
+#define MAC_ADDR_OFFSET_LEGACY		0
+
+#define LAYOUT_INVALID	0
+#define LAYOUT_LEGACY	0xff
+
+static int cpl_eeprom_bus;
+static int cpl_eeprom_layout;
+
+static struct udevice  *g_dev = NULL;
+
+static int cpl_eeprom_init(void) {
+
+	int i2c_bus = CONFIG_SYS_I2C_EEPROM_BUS;
+	uint8_t chip = CONFIG_SYS_I2C_EEPROM_ADDR;
+
+	struct udevice *bus, *dev;
+	int ret;
+
+	if (!g_dev) {
+
+		ret = uclass_get_device_by_seq(UCLASS_I2C, i2c_bus, &bus);
+		if (ret) {
+			printf("%s: No bus %d\n", __func__, i2c_bus);
+			return ret;
+		}
+
+		ret = dm_i2c_probe(bus, chip, 0, &dev);
+		if (ret) {
+			printf("%s: Can't find device id=0x%x, on bus %d\n",
+				__func__, chip, i2c_bus);
+			return ret;
+		}
+
+		/* Init */
+		g_dev = dev;
+	}
+
+	return 0;
+}
+
+static int cpl_eeprom_read(uint offset, uchar *buf, int len)
+{
+	int res;
+
+	res = cpl_eeprom_init();
+	if (res < 0)
+		return res;
+
+	res  = dm_i2c_read(g_dev, offset, buf, len);
+
+	return res;
+}
+
+
+static int cpl_eeprom_setup(uint eeprom_bus)
+{
+	int res;
+
+	/*
+	 * We know the setup was already done when the layout is set to a valid
+	 * value and we're using the same bus as before.
+	 */
+	if (cpl_eeprom_layout != LAYOUT_INVALID && eeprom_bus == cpl_eeprom_bus)
+		return 0;
+
+	cpl_eeprom_bus = eeprom_bus;
+	res = cpl_eeprom_read(EEPROM_LAYOUT_VER_OFFSET,
+			     (uchar *)&cpl_eeprom_layout, 1);
+
+	if (res) {
+		cpl_eeprom_layout = LAYOUT_INVALID;
+		return res;
+	}
+
+	if (cpl_eeprom_layout == 0 || cpl_eeprom_layout >= 0x20)
+		cpl_eeprom_layout = LAYOUT_LEGACY;
+
+	return 0;
+}
+
+/*
+ * Routine: cpl_eeprom_read_mac_addr
+ * Description: read mac address and store it in buf.
+ */
+int cpl_eeprom_read_mac_addr(uchar *buf, uint eeprom_bus)
+{
+	uint offset;
+	int err;
+
+	err = cpl_eeprom_setup(eeprom_bus);
+	if (err)
+		return err;
+
+	offset = (cpl_eeprom_layout != LAYOUT_LEGACY) ?
+			MAC_ADDR_OFFSET : MAC_ADDR_OFFSET_LEGACY;
+
+	return cpl_eeprom_read(offset, buf, 6);
+}
+
+static u32 board_rev;
+
+/*
+ * Routine: cpl_eeprom_get_board_rev
+ * Description: read system revision from eeprom
+ */
+u32 cpl_eeprom_get_board_rev(uint eeprom_bus)
+{
+	char str[5]; /* Legacy representation can contain at most 4 digits */
+	uint offset = BOARD_REV_OFFSET_LEGACY;
+
+	if (board_rev)
+		return board_rev;
+
+	if (cpl_eeprom_setup(eeprom_bus))
+		return 0;
+
+	if (cpl_eeprom_layout != LAYOUT_LEGACY)
+		offset = BOARD_REV_OFFSET;
+
+	if (cpl_eeprom_read(offset, (uchar *)&board_rev, BOARD_REV_SIZE))
+		return 0;
+
+	/*
+	 * Convert legacy syntactic representation to semantic
+	 * representation. i.e. for rev 1.00: 0x100 --> 0x64
+	 */
+	if (cpl_eeprom_layout == LAYOUT_LEGACY) {
+		sprintf(str, "%x", board_rev);
+		board_rev = simple_strtoul(str, NULL, 10);
+	}
+
+	return board_rev;
+};
+
+/*
+ * Routine: cpl_eeprom_get_board_rev
+ * Description: read system revision from eeprom
+ *
+ * @buf: buffer to store the product name
+ * @eeprom_bus: i2c bus num of the eeprom
+ *
+ * @return: 0 on success, < 0 on failure
+ */
+int cpl_eeprom_get_product_name(uchar *buf, uint eeprom_bus)
+{
+	int err;
+
+	if (buf == NULL)
+		return -EINVAL;
+
+	err = cpl_eeprom_setup(eeprom_bus);
+	if (err)
+		return err;
+
+	err = cpl_eeprom_read(PRODUCT_NAME_OFFSET, buf, PRODUCT_NAME_SIZE);
+	if (!err) /* Protect ourselves from invalid data (unterminated str) */
+		buf[PRODUCT_NAME_SIZE - 1] = '\0';
+
+	return err;
+}
diff --git a/board/compulab/ucm-imx8m-mini/eeprom.h b/board/compulab/ucm-imx8m-mini/eeprom.h
new file mode 100644
index 0000000000..9de4aadd43
--- /dev/null
+++ b/board/compulab/ucm-imx8m-mini/eeprom.h
@@ -0,0 +1,30 @@
+/*
+ * (C) Copyright 2011 CompuLab, Ltd. <www.compulab.co.il>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef _EEPROM_
+#define _EEPROM_
+#include <errno.h>
+
+#ifdef CONFIG_DM_I2C
+int cpl_eeprom_read_mac_addr(uchar *buf, uint eeprom_bus);
+u32 cpl_eeprom_get_board_rev(uint eeprom_bus);
+int cpl_eeprom_get_product_name(uchar *buf, uint eeprom_bus);
+#else
+static inline int cpl_eeprom_read_mac_addr(uchar *buf, uint eeprom_bus)
+{
+	return 1;
+}
+static inline u32 cpl_eeprom_get_board_rev(uint eeprom_bus)
+{
+	return 0;
+}
+static inline int cpl_eeprom_get_product_name(uchar *buf, uint eeprom_bus)
+{
+	return -ENOSYS;
+}
+#endif
+
+#endif
diff --git a/board/compulab/ucm-imx8m-mini/eeprom_spl.c b/board/compulab/ucm-imx8m-mini/eeprom_spl.c
new file mode 100644
index 0000000000..09a04fda92
--- /dev/null
+++ b/board/compulab/ucm-imx8m-mini/eeprom_spl.c
@@ -0,0 +1,147 @@
+/*
+ * (C) Copyright 2019 CompuLab, Ltd. <www.compulab.co.il>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <i2c.h>
+#include <linux/kernel.h>
+#include <asm/arch/imx8mq_pins.h>
+#include <asm/mach-imx/gpio.h>
+#include <asm-generic/gpio.h>
+#include <asm/setup.h>
+#include "eeprom.h"
+
+#define CONFIG_SYS_I2C_EEPROM_ADDR_P1	0x51
+#define CONFIG_SYS_I2C_EEPROM_ADDR_LEN	1
+
+#ifndef CONFIG_SYS_I2C_EEPROM_BUS
+#define CONFIG_SYS_I2C_EEPROM_BUS	1
+#endif
+
+static int cl_eeprom_bus = CONFIG_SYS_I2C_EEPROM_BUS;
+
+static iomux_v3_cfg_t const eeprom_pads[] = {
+	IMX8MQ_PAD_GPIO1_IO13__GPIO1_IO13 | MUX_PAD_CTRL(NO_PAD_CTRL),
+};
+
+#define EEPROM_WP_GPIO IMX_GPIO_NR(1, 13)
+
+static void cl_eeprom_we(int enable)
+{
+	static int done = 0;
+
+	if (done) {
+		gpio_direction_output(EEPROM_WP_GPIO, enable);
+		return;
+	}
+
+	imx_iomux_v3_setup_multiple_pads(
+		eeprom_pads, ARRAY_SIZE(eeprom_pads));
+	gpio_request(EEPROM_WP_GPIO, "eeprom_wp");
+	gpio_direction_output(EEPROM_WP_GPIO, enable);
+	done = 1;
+}
+
+static int cl_eeprom_read(uint offset, uchar *buf, int len)
+{
+	int res;
+
+	i2c_set_bus_num(cl_eeprom_bus);
+
+	res = i2c_read(CONFIG_SYS_I2C_EEPROM_ADDR_P1, offset,
+			CONFIG_SYS_I2C_EEPROM_ADDR_LEN, buf, len);
+
+	return res;
+}
+
+static int cl_eeprom_write(uint offset, uchar *buf, int len)
+{
+	int res;
+
+	cl_eeprom_we(1);
+
+	i2c_set_bus_num(cl_eeprom_bus);
+
+	res = i2c_write(CONFIG_SYS_I2C_EEPROM_ADDR_P1, offset,
+			CONFIG_SYS_I2C_EEPROM_ADDR_LEN, buf, len);
+
+	/*cl_eeprom_we(0);*/
+
+	return res;
+}
+
+/* Reserved for fututre use area */
+#define BOARD_DDRINFO_OFFSET 0x40
+#define BOARD_DDRINFO_SIZE 4
+static u32 board_ddrinfo = 0xdeadbeef;
+
+#define BOARD_DRATE_OFFSET 0x50
+#define BOARD_DRATE_SIZE 4
+static u32 board_drate = 0xdeadbeef;
+
+#define BOARD_OSIZE_OFFSET 0x80
+#define BOARD_OSIZE_SIZE 4
+static u32 board_osize = 0xdeadbeef;
+
+#define BOARD_DDRINFO_VALID(A) (A != 0xdeadbeef)
+
+u32 cl_eeprom_get_ddrinfo(void)
+{
+	if (!BOARD_DDRINFO_VALID(board_ddrinfo)) {
+		if (cl_eeprom_read(BOARD_DDRINFO_OFFSET, (uchar *)&board_ddrinfo, BOARD_DDRINFO_SIZE))
+			return 0;
+	}
+	return board_ddrinfo;
+};
+
+u32 cl_eeprom_set_ddrinfo(u32 ddrinfo)
+{
+	if (cl_eeprom_write(BOARD_DDRINFO_OFFSET, (uchar *)&ddrinfo, BOARD_DDRINFO_SIZE))
+		return 0;
+
+	board_ddrinfo = ddrinfo;
+
+	return board_ddrinfo;
+};
+
+#define DRATE_OFFSET(R,C) (BOARD_DRATE_OFFSET + ( 0x10 * (R) ) + ( (C) << 2 ))
+u32 cl_eeprom_get_drate(unsigned int r, unsigned int c)
+{
+	if (cl_eeprom_read(DRATE_OFFSET(r,c) , (uchar *)&board_drate, BOARD_DRATE_SIZE))
+		return 0;
+
+	return board_drate;
+};
+
+u32 cl_eeprom_set_drate(u32 drate, unsigned int r, unsigned int c)
+{
+	if (cl_eeprom_write(DRATE_OFFSET(r,c), (uchar *)&drate, BOARD_DRATE_SIZE))
+		return 0;
+
+	board_drate = drate;
+
+	udelay(5000);
+
+	return board_drate;
+};
+
+/* override-size ifaces */
+u32 cl_eeprom_get_osize(void)
+{
+	if (cl_eeprom_read(BOARD_OSIZE_OFFSET, (uchar *)&board_osize, BOARD_OSIZE_SIZE))
+		return 0;
+
+	return board_osize;
+};
+
+u32 cl_eeprom_set_osize(u32 osize)
+{
+	if (cl_eeprom_write(BOARD_OSIZE_OFFSET, (uchar *)&osize, BOARD_OSIZE_SIZE))
+		return 0;
+
+	board_osize = osize;
+
+	return board_osize;
+};
diff --git a/board/compulab/ucm-imx8m-mini/spl.c b/board/compulab/ucm-imx8m-mini/spl.c
index 537eaa465f..febd27c93e 100644
--- a/board/compulab/ucm-imx8m-mini/spl.c
+++ b/board/compulab/ucm-imx8m-mini/spl.c
@@ -25,80 +25,6 @@
 
 DECLARE_GLOBAL_DATA_PTR;
 
-static int const memopt_gpios[] = {
-	IMX_GPIO_NR(1, 0),
-	IMX_GPIO_NR(1, 15),
-};
-static iomux_v3_cfg_t const memopt_gpio_pads[] = {/* internal pull-up */
-	IMX8MM_PAD_GPIO1_IO00_GPIO1_IO0 | MUX_PAD_CTRL(0x140),
-	IMX8MM_PAD_GPIO1_IO15_GPIO1_IO15 | MUX_PAD_CTRL(0x140),
-};
-/* Read GPIO input to find out memory size */
-static int get_wired_ddr_size(void)
-{
-	unsigned int memopt = 0;
-	int ddr_size;
-	int pin_val;
-
-	imx_iomux_v3_setup_multiple_pads(memopt_gpio_pads,
-			ARRAY_SIZE(memopt_gpio_pads));
-
-	for(int i=0; ARRAY_SIZE(memopt_gpios) > i; ++i) {
-		gpio_request(memopt_gpios[i], "memopt");
-		gpio_direction_input(memopt_gpios[i]);
-		pin_val = gpio_get_value(memopt_gpios[i]);
-		if(0 > pin_val) {
-			printf("%s: GPIO[%i] read error %i\n",
-					__func__, memopt_gpios[i], -pin_val);
-			gpio_free(memopt_gpios[i]);
-			return -EINVAL;
-		}
-		else {
-			memopt |= pin_val << i;
-		}
-	}
-	switch (memopt) {
-	case 0:
-		ddr_size = 1;
-		break;
-	case 1:
-		ddr_size = 4;
-		break;
-	case 3:
-		ddr_size = 2;
-		break;
-	default:
-		ddr_size=-EINVAL;
-		printf("%s: invalid combination of memopt bits 0x%0x\n",
-				__func__, memopt);
-		break;
-	}
-	printf("DDR size %i GiB detectd\n", ddr_size);
-	writel(ddr_size, TCM_BOARD_CFG);
-	return ddr_size;
-}
-
-
-void spl_dram_init(void)
-{
-	/* ddr init */
-	switch (get_wired_ddr_size()) {
-	case 1:
-		ddr_init(&ucm_dram_timing_1g);
-		break;
-	case 2:
-		ddr_init(&ucm_dram_timing_2g);
-		break;
-	case 4:
-		ddr_init(&ucm_dram_timing_4g);
-		break;
-	default:
-		printf("*** ERROR ***\n%s: DDR size is unknown -- stop!\n",
-				__func__);
-		while(true);
-	}
-}
-
 #define I2C_PAD_CTRL	(PAD_CTL_DSE6 | PAD_CTL_HYS | PAD_CTL_PUE)
 #define PC MUX_PAD_CTRL(I2C_PAD_CTRL)
 struct i2c_pads_info i2c_pad_info1 = {
diff --git a/board/compulab/ucm-imx8m-mini/ucm-imx8m-mini.c b/board/compulab/ucm-imx8m-mini/ucm-imx8m-mini.c
index 0febec421b..97331e55d9 100644
--- a/board/compulab/ucm-imx8m-mini/ucm-imx8m-mini.c
+++ b/board/compulab/ucm-imx8m-mini/ucm-imx8m-mini.c
@@ -150,11 +150,28 @@ int board_postclk_init(void)
 }
 #endif
 
-int get_ddr_size(void)
-{
-	return readl(TCM_BOARD_CFG);
+static phys_size_t imx8_ddr_size(void)
+{
+    unsigned long value = readl(TCM_DATA_CFG);
+    phys_size_t dram_size = 0x40000000;;
+
+    switch (value) {
+    case 4096:
+        /*value = 3084;*/
+    case 3084:
+    case 2048:
+    case 1536:
+    case 1024:
+    case 768:
+    case 512:
+    case 256:
+        dram_size = ( value << 20 );
+        break;
+    default:
+        break;
+    };
+    return dram_size;
 }
-
 	/* Get the top of usable RAM */
 ulong board_get_usable_ram_top(ulong total_size)
 {
diff --git a/board/compulab/ucm-imx8m-mini/ucm-imx8m-mini.h b/board/compulab/ucm-imx8m-mini/ucm-imx8m-mini.h
index 7810295206..be698941da 100644
--- a/board/compulab/ucm-imx8m-mini/ucm-imx8m-mini.h
+++ b/board/compulab/ucm-imx8m-mini/ucm-imx8m-mini.h
@@ -7,6 +7,6 @@
 #ifndef __UCM_IMX8M_MINI__
 #define __UCM_IMX8M_MINI__
 
-#define TCM_BOARD_CFG 0x7e0000
+#define TCM_DATA_CFG 0x7e0000
 
 #endif
-- 
2.11.0

