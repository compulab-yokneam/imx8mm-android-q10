From 3eef78da6898ef4f8f576f3cb137c94e338886ae Mon Sep 17 00:00:00 2001
From: Kirill Kapranov <kirill.kapranov@compulab.co.il>
Date: Tue, 25 Aug 2020 21:36:21 +0300
Subject: [PATCH 47/49] rtc:abx80x: Enable SQW output

Signed-off-by: Kirill Kapranov <kirill.kapranov@compulab.co.il>
---
 drivers/rtc/rtc-abx80x.c | 95 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 95 insertions(+)

diff --git a/drivers/rtc/rtc-abx80x.c b/drivers/rtc/rtc-abx80x.c
index 73830670a41f..d6af690fb594 100644
--- a/drivers/rtc/rtc-abx80x.c
+++ b/drivers/rtc/rtc-abx80x.c
@@ -50,6 +50,10 @@
 #define ABX8XX_IRQ_AIE		BIT(2)
 #define ABX8XX_IRQ_IM_1_4	(0x3 << 5)
 
+#define ABX8XX_REG_SQW	 		0x13
+#define ABX8XX_REG_SQW_MODE_BITS	5
+#define ABX8XX_REG_SQW_EN		BIT(7)
+
 #define ABX8XX_REG_CD_TIMER_CTL	0x18
 
 #define ABX8XX_REG_OSC		0x1c
@@ -487,9 +491,94 @@ static ssize_t oscillator_show(struct device *dev,
 
 static DEVICE_ATTR_RW(oscillator);
 
+#define SQFS_COUNT (1 << ABX8XX_REG_SQW_MODE_BITS)
+static char const *const SQFS[SQFS_COUNT] = { "1_century", "32768_Hz", "8192_Hz", "4096_Hz",
+				"2048_Hz", "1024_Hz", "512_Hz", "256_Hz",
+				"128_Hz", "64_Hz", "32_Hz", "16_Hz",
+				"8_Hz", "4_Hz", "2_Hz", "1_Hz",
+				"1/2_Hz", "1/4_Hz", "1/8_Hz", "1/16_Hz",
+				"1/32_Hz", "1_min", "16384_Hz", "100_Hz",
+				"1_hour", "1_day", "TIRQ", "nTIRQ",
+				"1_year", "1_Hz_to_Counters",
+				"1/32_Hz_from_Acal", "1/8_Hz_from_Acal"
+};
+
+static int sqw_set(struct i2c_client *client, const char *buf)
+{
+	int reg = i2c_smbus_read_byte_data(client, ABX8XX_REG_SQW);
+
+	if (sysfs_streq(buf, "none")) {
+		reg &= ~ABX8XX_REG_SQW_EN;
+		dev_info(&client->dev, "sqw output disabled\n");
+	}
+	else {
+		int idx = __sysfs_match_string(SQFS, SQFS_COUNT, buf);
+
+		if( 0 > idx )
+			return idx;
+
+		dev_info(&client->dev, "sqw output enabled @ %s\n",SQFS[idx]);
+		reg &= ~((1 << ABX8XX_REG_SQW_MODE_BITS) - 1);
+		reg |= idx | ABX8XX_REG_SQW_EN;
+	}
+
+	reg = i2c_smbus_write_byte_data(client, ABX8XX_REG_SQW, reg);
+	if (reg < 0)
+		goto err;
+
+	return 0;
+err:
+	dev_err(&client->dev, "Failed to access register %x\n", ABX8XX_REG_SQW);
+	return reg;
+
+}
+
+static ssize_t sqw_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf, size_t count)
+{
+	int retval;
+
+	retval = sqw_set(to_i2c_client(dev->parent), buf);
+	if(retval)
+		return retval;
+	else
+		return count;
+}
+
+static ssize_t sqw_show(struct device *dev,
+			       struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev->parent);
+	int flags;
+	int len = 0;
+	int i;
+
+	flags = i2c_smbus_read_byte_data(client, ABX8XX_REG_SQW);
+	if (flags < 0) {
+		dev_err(dev, "Failed to read SQW\n");
+		return sprintf(buf, "\n");
+	}
+	if (flags & ABX8XX_REG_SQW_EN )
+		len += scnprintf(buf+len, PAGE_SIZE - len, "none ");
+	else
+		len += scnprintf(buf+len, PAGE_SIZE - len, "[none] ");
+
+	for(i = 0; SQFS_COUNT > i; ++i) {
+		if (flags | ABX8XX_REG_SQW_EN && i == (flags & ((1 << ABX8XX_REG_SQW_MODE_BITS) - 1)))
+			len += scnprintf(buf+len, PAGE_SIZE - len, "[%s] ", SQFS[i]);
+		else
+			len += scnprintf(buf+len, PAGE_SIZE - len, "%s ", SQFS[i]);
+	}
+	return len;
+}
+
+static DEVICE_ATTR_RW(sqw);
+
 static struct attribute *rtc_calib_attrs[] = {
 	&dev_attr_autocalibration.attr,
 	&dev_attr_oscillator.attr,
+	&dev_attr_sqw.attr,
 	NULL,
 };
 
@@ -685,6 +774,7 @@ static int abx80x_probe(struct i2c_client *client,
 	unsigned int lot;
 	unsigned int wafer;
 	unsigned int uid;
+	const char *sqw_mode_name;
 
 	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
 		return -ENODEV;
@@ -804,6 +894,9 @@ static int abx80x_probe(struct i2c_client *client,
 		abx80x_enable_trickle_charger(client, trickle_cfg);
 	}
 
+	if (!of_property_read_string(np, "sqw", &sqw_mode_name))
+		sqw_set(client, sqw_mode_name);
+
 	err = i2c_smbus_write_byte_data(client, ABX8XX_REG_CD_TIMER_CTL,
 					BIT(2));
 	if (err)
@@ -847,6 +940,8 @@ static int abx80x_probe(struct i2c_client *client,
 			err);
 		return err;
 	}
+	else
+		dev_err(&client->dev, "CCCCreate sysfs group: %d\n", 0);
 
 	return rtc_register_device(priv->rtc);
 }
-- 
2.11.0

